<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Dish Selector</title>
   <link rel="icon" type="image/x-icon" href="/images/favicon.ico" />
  <style>
    

    .popup-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.popup-box.dish-popup {
  background: linear-gradient(to right, #fffaf0, #fff0d9);
  width: 95%;
  max-width: 1200px;
  max-height: 90vh;
  overflow-y: auto;
  padding: 20px;
  border-radius: 10px;
  position: relative;
  display: flex;
  flex-direction: column;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
}

    .dish-search {
  padding: 12px;
  font-size: 1.1rem;
  width: 100%;
  margin-bottom: 10px;
  margin-top: 30px;
  border: 1px solid #ccc;
  border-radius: 6px;
  box-sizing: border-box;  /* ✅ Fixes overflow issue */
}


    .popup-content {
      display: flex;
      height: 100%;
      overflow: hidden;
    }

    .dish-list {
      flex: 2;
      overflow-y: auto;
      padding-right: 10px;
    }

    .dish-category h4 {
      margin-top: 20px;
      padding-bottom: 5px;
      border-bottom: 1px solid #ddd;
      color: #333;
      font-size: 1.5em;
    }

    .dish-card {
      background: #f0f0f0;
      margin: 10px 0;
      padding: 8px;
      display: flex;
      align-items: center;
      border-radius: 8px;
      cursor: pointer;
      transition: 0.2s ease;
      font-size: 1.5em;
    }

    .dish-card:hover {
      background-color: #e6f7ff;
    }

    .dish-card img {
      width: 150px;
      height: 150px;
      object-fit: cover;
      border-radius: 6px;
      margin-right: 12px;
    }

    .selected-dishes {
  flex: 1;
  background: linear-gradient(to right, #fffaf0, #fff0d9);
  padding: 10px;
  overflow-y: auto;
  border-left: 1px solid #ccc;
}

.selected-dish-item {
  display: flex;
  align-items: flex-start;
  margin-bottom: 16px;
  border-bottom: 1px solid #eee;
  padding-bottom: 12px;
  background-color: white;
}

.selected-dish-item img {
  width: 110px;
  height: 110px;
  object-fit: cover;
  border-radius: 6px;
  margin-right: 15px;
}

.dish-info {
  flex: 1;
}

.dish-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.dish-price {
  font-size: 1.2rem;
  color: #333;
  font-weight: bold;
}

.dish-name {
  font-size: 1.4rem;
  color: #000;
  margin-left: 10px;
  flex: 1;
}

.dish-actions {
  display: flex;
  align-items: center;
  margin-left: 12px;
  gap: 60%; 
}
.remove-btn {
  color: rgb(91, 89, 89);
  cursor: pointer;
  font-size: 1.4rem;
  font-weight: bold;
}


.dish-actions select {
  padding: 6px;
  font-size: 1rem;
  border-radius: 20%;
  border: 1px solid #ccc;
 
}
    

 .close-popup {
  position: absolute;
  top: 15px;
  right: 20px;
  font-size: 22px;
  font-weight: bold;
  border: none;
  background: transparent;
  color: #333;
  cursor: pointer;
  z-index: 10000;
}


    .tab-switch {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-bottom: 15px;
}

.tab-switch button {
  padding: 8px 16px;
  border: none;
  background-color: #eee;
  cursor: pointer;
  border-radius: 6px;
  font-size: 1.1rem;
}

.tab-switch button.active {
  background-color: orange;
  color: white;
  font-weight: bold;
}
.selected-dishes {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.place-order-btn {
  margin-top: 20px;
  align-self: center;
  padding: 10px 20px;
  font-size: 1.1rem;
  background-color: orange;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}


.place-order-btn:hover {
  background-color: darkorange;
}

  </style>
</head>
<body>

   <div class="popup-overlay" id="dishPopup">
   <div class="popup-box dish-popup">
  <button class="close-popup" onclick="closeDishPopup('<%= tableId %>')">✖</button>

  <div class="tab-switch">
    <button onclick="switchTab('taking')" id="tab-taking" class="active">Order Taking</button>
    <button onclick="switchTab('taken')" id="tab-taken">Order Taken</button>
  </div>

  <!-- Tabs -->
  <div id="tab-taking-section" class="tab-section">
    <input type="text" id="dishSearch" placeholder="Search by name or price..." class="dish-search" />
    <div class="popup-content">
      <div class="dish-list" id="dishList">
        <% dishesByCategory.forEach((group) => { %>
          <div class="dish-category">
            <h4><%= group.category %></h4>
            <% group.dishes.forEach(d => { %>
              <div class="dish-card" onclick="selectDish('<%= d._id %>')">
                <img src="<%= d.image %>" alt="Dish" />
                <p><%= d.name %> - ₹<%= d.price %></p>
              </div>
            <% }) %>
          </div>
        <% }) %>
      </div>
      <div class="selected-dishes">
  <div id="selectedDishes"></div> <!-- Only dishes go here -->
  <p id="orderSuccessMsg" style="color: green; text-align: center; font-weight: bold; margin-top: 10px; display: none;"></p>
  <button class="place-order-btn" onclick="placeOrder('<%= tableId %>')">🛒 Place Order</button>

</div>

    </div>
    
  </div>

  <div id="tab-taken-section" class="tab-section" style="display: none;">
    <div class="selected-dishes" id="existingDishes">
      <!-- Existing order dishes will render here -->
        <p id="orderSuccessMsg" style="color: green; text-align: center; font-weight: bold; margin-top: 10px; display: none;"></p>
    </div>
  </div>
</div>

  </div>
  

  <script>
   
     const allDishes = JSON.parse('<%- JSON.stringify(dishes) %>');

    const selected = new Map();
    console.log(allDishes);
    function selectDish(id) {
      const dish = allDishes.find(d => d._id === id);
      if (!selected.has(id)) {
        selected.set(id, { ...dish, quantity: 1 });
        renderSelectedDishes();
      }
    }

    function renderSelectedDishes() {
  const container = document.getElementById('selectedDishes');
  container.innerHTML = ''; // ✅ only clears the inner dish items
  selected.forEach((dish, id) => {
    const item = document.createElement('div');
    item.className = 'selected-dish-item';
    item.innerHTML = `
      <img src="${dish.image}" />
      <div class="dish-info">
        <div class="dish-header">
          <strong class="dish-name">${dish.name}</strong>
          <span class="dish-price">₹${dish.price}</span>
        </div>
        <div class="dish-actions">
          <span class="remove-btn" onclick="removeDish('${id}')">✖</span>
          <select onchange="updateQty('${id}', this.value)">
            ${[...Array(10)].map((_, i) =>
              `<option value="${i + 1}" ${i + 1 === dish.quantity ? 'selected' : ''}>${i + 1}</option>`
            ).join('')}
          </select>
        </div>
      </div>
    `;
    container.appendChild(item);
  });
}

    function updateQty(id, qty) {
      if (selected.has(id)) {
        selected.get(id).quantity = parseInt(qty);
      }
    }

    function removeDish(id) {
      selected.delete(id);
      renderSelectedDishes();
    }

  function closeDishPopup(tableId) {
  const hasOrder = selected.size > 0;
  if (hasOrder) {
    const confirmCancel = confirm("You have selected dishes. Do you really want to cancel this order?");
    if (!confirmCancel) return;
  }

  fetch(`/staff/reset-table/${tableId}`, {
    method: 'POST'
  })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        // Wait briefly before navigating
       
          window.location.href = `/staff/staff-dashboard`;
       
      } else {
        alert("❌ Failed to reset table");
      }
    })
    .catch(err => {
      console.error("Reset failed:", err);
      alert("❌ Something went wrong");
    });
}


    document.getElementById('dishSearch').addEventListener('input', function () {
  const keyword = this.value.toLowerCase();

  document.querySelectorAll('.dish-category').forEach(category => {
    const cards = category.querySelectorAll('.dish-card');
    let hasVisible = false;

    cards.forEach(card => {
      const text = card.textContent.toLowerCase();
      const match = text.includes(keyword);
      card.style.display = match ? 'flex' : 'none';
      if (match) hasVisible = true;
    });

    // Show/hide the entire category
    category.style.display = hasVisible ? 'block' : 'none';
  });
});

function resetTable(tableId) {
  fetch(`/staff/reset-table/${tableId}`, {
    method: 'POST'
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      console.log("Table reset!");
      fetchTableData(); // Re-render UI
    }
  })
  .catch(err => console.error("Failed to reset table:", err));
}
      


  // Tab Switch Function
  function switchTab(tab) {
    document.getElementById('tab-taking-section').style.display = tab === 'taking' ? 'block' : 'none';
    document.getElementById('tab-taken-section').style.display = tab === 'taken' ? 'block' : 'none';

    document.getElementById('tab-taking').classList.toggle('active', tab === 'taking');
    document.getElementById('tab-taken').classList.toggle('active', tab === 'taken');

    if (tab === 'taken') {
      loadExistingOrder();
    }
  }

  // Load existing food for table
  function loadExistingOrder() {
    fetch(`/api/table-food/<%= tableId %>`)
      .then(res => res.json())
      .then(data => {
        const container = document.getElementById('existingDishes');
        container.innerHTML = '';
        if (!data || !data.length) {
          container.innerHTML = "<p style='text-align:center;'>No dishes ordered yet.</p>";
          return;
        }

        data.forEach(d => {
          const item = document.createElement('div');
          item.className = 'selected-dish-item';
          item.innerHTML = `
            <img src="${d.image}" />
            <div class="dish-info">
              <div class="dish-header">
                <strong class="dish-name">${d.name}</strong>
                <span class="dish-price">₹${d.price}</span>
              </div>
              <div class="dish-actions">
                <span style="font-size: 1rem; color: #444;">Qty: ${d.quantity}</span>
              </div>
            </div>
          `;
          container.appendChild(item);
        });
      })
      .catch(err => {
        console.error("Failed to load order:", err);
      });
  }
function placeOrder(tableId) {
  if (selected.size === 0) {
    return alert("No dishes selected!");
  }

  const selectedDishes = Array.from(selected.values()).map(dish => ({
    dishNo: dish.dishNo,
    quantity: dish.quantity
  }));

  fetch(`/staff/place-order/${tableId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ selectedDishes })
  })
    .then(res => res.json())
    .then(data => {
      const msgElem = document.getElementById("orderSuccessMsg");
      if (data.success) {
        msgElem.textContent = "✅ Order placed successfully!";
        msgElem.style.display = "block";
        
         selected.clear();
        renderSelectedDishes();

        // Optionally switch to "Order Taken" tab
        switchTab("taken");

        // Hide message after 3 seconds
        setTimeout(() => {
          msgElem.style.display = "none";
        }, 3000);
      } else {
        alert("❌ " + data.message);
      }
    })
    .catch(err => {
      console.error("Place order error:", err);
      alert("❌ Failed to place order");
    });
}

    
  </script>
</body>
</html>
